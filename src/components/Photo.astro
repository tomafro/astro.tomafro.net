---
import { getImage } from "astro:assets";

export interface Props {
  src: any;
  alt: string;
  caption?: string;
  height: number;
}

var { src, alt, height, caption } = Astro.props;

const { width: imageWidth, height: imageHeight } = src;

height ||= imageHeight;
const aspectRatio = imageWidth / imageHeight;
const width = Math.round(height * aspectRatio);

const img = await getImage({
  src: src,
  width: width,
  height: height,
  alt: alt,
});

const widths = [width * 2, width, Math.round(width / 2)];
const formats = ["webp", "avif", src.format];

function getContentType(format: string): string {
  if (format == "jpg") {
    return "image/jpeg";
  }
  return `image/${format}`;
}

const sources = await Promise.all(
  formats.map(async (format) => {
    const srcset = widths.map(async (width) => {
      const image = await getImage({
        src: src,
        width: width,
        height: Math.round(width / aspectRatio),
        format: format,
      });
      return `${image.src} ${width}w`;
    });
    return {
      contentType: getContentType(format),
      srcset: (await Promise.all(srcset)).join(", "),
    };
  })
);
---

<style lang="scss">
  div {
    display: flex;
    justify-content: center;
  }

  figure {
    display: inline-block;

    :global(img) {
      padding: 4px;
      border: 1px solid #ccc;

      display: block;
    }

    figcaption {
      font-size: 0.8em;
      text-align: center;
      font-style: italic;
    }

    margin-bottom: var(--line-height);
  }
</style>

<div>
  <figure>
    <picture>
      {sources.map((s) => <source {...s} />)}
      <img src={img.src} width={width} height={height} alt={alt} />
    </picture>
    {caption && <figcaption>{caption}</figcaption>}
  </figure>
</div>
